<section class="hero is-primary">
  <div class="hero-body">
    <div class="container">
      <h1 class="title">
        What is this all about?
      </h1>
    </div>
  </div>
</section>

<section class="section">
<div class="container">
	<div class="content">

<h1>I want you to find a poem you love.</h1>

<p>This project comes from a very human desire: to share something I find meaningful. Poems are hard to love, but when one makes it into your soul it can be the most powerful thing. How do we find poems to love?</p>

<p>This is my idea: you might have one or two poems you really love. You found them at some point in your life and they just clicked. If I could give you one more poem you love, you can sit with it and take it into your heart and love it. One more poem! Amazing. And then, maybe, one more poem you love. Slowly you build a larger library of poems. Eventually it becomes easier to love new ones.</p>

<p>The Poetry Recommendation Engine takes one poem and tries to give you one other poem that can touch you. You can take it from there.</p>

<h1>This is how the engine works.</h1>

<p>The Poetry Recommendation Engine currently looks at a set of computer-generated features that describe your poem and finds another poem in the database with the most similar set of features. "Most similar" means it finds the poem with the smallest sum of the square of differences for each feature.</p>

<h2>Size Features</h2>

<p>These features describe the look of the poem on the page. They are easy to calculate so I started with these.</p>

<ul>

<li><p><strong>Number of Words</strong> 
Pretty self-explanatory.</p>
</li>

<li><p><strong>Number of Lines</strong> 
Yup.</p>
</li>

<li><p><strong>Width in Characters</strong> This is the average line length in characters. This gives a sense of how wide the poem sits on the page.</p>
</li>

<li><p><strong>Average Word Size</strong> 
This is the average size of a word in characters. The idea here is to get a feel for the types of words in the poem -- lots of long words or mostly short ones? Technically this could count as a vocabulary feature but it's calculated like a size one.</p>
</li>

</ul>

<h2>Vocabulary Features</h2>

<p>These features try to describe the vocabulary the poem uses.

<ul>

<li><p><strong>RepetitionScore</strong> 
A score of 0 means no word or <i>stem</i> of word is repeated. A score of 1 means every single word is exactly the same. It's calculated as follows: Each word in the poem contributes 1 if it is repeated exactly elsewhere in the poem, 0.5 if its stem (using the Snowball Stemmer) is repeated elsewhere, or 0 if not. Then the score is divided by the number of words in the poem.</p>
</li>

<li><p><strong>Obscurity Score</strong> 
A score of 0 means every word is found in the top 1000 used English words according to <a href="wordfrequency.info">WordFrequency.Info</a>. Each word not found in the top 1000 contributes 1; the score is them divided by the number of words in the poem.</p>
</li>

</ul>

<h2>Linguistic Features</h2>

<p>These features try to describe some aspects of the linguistics a poem uses.

<ul>

<li><p><strong>SentenceScore</strong> 
+1 For each sentence used, where a sentence is a string of text ending with a period. +1 For each sentence starting with a capital letter. +1 For each sentence that ends with line break. Divide score by number of characters in poem. Multiply by ten to get larger numbers..</p>
</li>

</ul>

<h1>Previous incarnations to haunt me.</h1>

<h2>Topic Modeling</h2>

<h4>What's Wrong With Topic Modeling?</h4>

<p>My first iteration of the this project used topic modeling, specifically an algorithm called latent dirichlet allocation (LDA). My favorite layman's explanation of LDA is by <a href="http://blog.echen.me/2011/08/22/introduction-to-latent-dirichlet-allocation/" target="_blank">Edwin Chen on his blog</a>. My favorite technical explanation of LDA is by <a href="http://videolectures.net/mlss09uk_blei_tm/" target="_blank">Prof. David Blei in this lecture</a>. Basically LDA turns each poem into a bag of words: 12 cases of 'you', 3 cases of 'flower', etc. Then it finds clusters of words that commonly occur in poems together. These are considered the topics. Each poem has a distribution of all topics, a poem might be mostly topic 1 but partly topic 2 and very little topic 3. In this application, there were 20 topics. (An arbitrary choice I made.) I would recommend a poem with similar topics; I tried a couple different definitions of 'similar' none of which ever produced very good or interpretable results.</p>

<p>I didn't think topic modeling worked very well in this application. When I looked at the resulting topics, which I've left below for the curious, some seem to make sense, but most seem random. I set alpha to 0.1 and document topic distributions are fairly pointed, i.e. the distribution is not very even, which is good. But the topic words don't make a lot of sense.</p>

<p>Even if the topics had made sense, the average number of words from the top 20 words in the top topic of a poem was 2.5 words per poem or only 1% of all words in the poem! It does not dramatically improve if I look at the top 3 topics: that gets me to 8.5 words or 4%. I tried generating far more topics; also doesn't help. This implies that the poems aren't strongly correlated with their top topics.</p>

<p>Some theories for this;

<ul>
	<li>My corpora isn't large enough. 5,000 poems is really not that many, especially given that many poems are short.</li>
	<li>Poems don't have enough words in them to strongly correlate with their topics. (Compared to, say, newspaper articles.)</li>
	<li>Topic modeling doesn't work well for poetry because poems don't repeat their topical words. The vocabulary for poetry is far larger than the vocabulary for e.g. newspapers. (I should get some hard numbers on this eventually.)</li>
	<li>The topics of poems are not reflected in their vocabulary. A poem about heartbreak could use flowers as a metaphor. How do we know the poem is about heartbreak? (I'm least convinced by this.)</li>
</ul>

<p>The other problem with topic modeling is that I did not get the same topics each time. So if I ran the topic modeling 20 times, I'd get 20 different recommendations. While this has some benefits, it meant I was unable to really dig in to improve it because it would change so drastically in each iteration</p>

<h4>Topic Words</h4>

<p>What are these crazy topics that are generated! Great question. Below is the list of topics and the top 20 words in each topic. Not that all poems are "cleaned" which means I make everything lowercase and remove punctuation.</p>

<ol>
<% for i in 1..20 %>
	<li>
		<% @topics[i].each do |word| %>
			<%= word %>, 
		<% end %>
	</li>
<% end %>
</ol>


<h4>Stop Words</h4>
<p>At first I didn't remove any stop words, which had clear problems of the word 'the' being ranked highly for most topics. I've slowly been removing more and more stop words to try to get better topic formation. At this point I'm removing the top 100 occuring words in the corpus. They are listed below.</p>

<p style="margin-left: 20px">the and of a to in i that is with it you my on for as his he from was not but her like we all at me or they this be by are your no their one when its so what she have out there who an if our will into up where now then him were them had down which how love us through do can would more over back time see night some know could man light only still has day come here eyes way long old each life never about too say am go said than
</p>


<h1>Who am I.</h1>

<p>Hi! My name is Katy and I became obsessed with the idea of a poetry recommendation engine in early 2016. I'm a writer-slash-engineer and what I like to do is make things. I used to make physical things (undergraduate degree in mechanical engineering) and now I make computer things (data scientist) but I've always made things with words. I blog about things I make <a href="https://katygero.wordpress.com" target="_blank">here</a> and about the books I read <a href="https://theilonkareader.wordpress.com" target="_blank">here</a>.</p>

<h1>A work in progress.</h1>

<p>There are lots of things still to do! This project is still in its early stages.</p>

<ul>
<li>Get some features that describe rhyme! This will be hard but fun.</li>
<li>I have some copyright information about the poems which I can parse to look for dates of publication and use that as a feature.</li>
<li>I have tags from Poetry Foundation; this can also be used.</li>
<li>Generate features that describe line length variability, white space usage, and punctuation usage.</li>
<li>There are some online word catalogues that could allow me to create scores for concreteness, emotion, etc. based purely on the vocabulary.</li>
</ul>
<br />
<p>Last updated July, 2017.</p>

</div>
</div>
</section>

